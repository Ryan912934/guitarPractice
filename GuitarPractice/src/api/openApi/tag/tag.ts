/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  TagListResponse,
  Error,
  GetTagsParams,
  TagResponse,
  TagRequest
} from '../../model'


export const getTags = (
    params?: GetTagsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagListResponse>> => {
    return axios.get(
      `/tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetTagsQueryKey = (params?: GetTagsParams,) => [`/tags`, ...(params ? [params]: [])] as const;
  

    
export const getGetTagsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTags>>, TError = AxiosError<Error>>(params?: GetTagsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTags>>> = ({ signal }) => getTags(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetTagsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTags>>>
export type GetTagsInfiniteQueryError = AxiosError<Error>

export const useGetTagsInfinite = <TData = Awaited<ReturnType<typeof getTags>>, TError = AxiosError<Error>>(
 params?: GetTagsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetTagsQueryOptions = <TData = Awaited<ReturnType<typeof getTags>>, TError = AxiosError<Error>>(params?: GetTagsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTags>>> = ({ signal }) => getTags(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getTags>>>
export type GetTagsQueryError = AxiosError<Error>

export const useGetTags = <TData = Awaited<ReturnType<typeof getTags>>, TError = AxiosError<Error>>(
 params?: GetTagsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postTags = (
    tagRequest: TagRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagResponse>> => {
    return axios.post(
      `/tags`,
      tagRequest,options
    );
  }



export const getPostTagsMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTags>>, TError,{data: TagRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postTags>>, TError,{data: TagRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTags>>, {data: TagRequest}> = (props) => {
          const {data} = props ?? {};

          return  postTags(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostTagsMutationResult = NonNullable<Awaited<ReturnType<typeof postTags>>>
    export type PostTagsMutationBody = TagRequest
    export type PostTagsMutationError = AxiosError<Error>

    export const usePostTags = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTags>>, TError,{data: TagRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostTagsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getTagsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagResponse>> => {
    return axios.get(
      `/tags/${id}`,options
    );
  }


export const getGetTagsIdQueryKey = (id: number,) => [`/tags/${id}`] as const;
  

    
export const getGetTagsIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTagsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTagsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTagsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsId>>> = ({ signal }) => getTagsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetTagsIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsId>>>
export type GetTagsIdInfiniteQueryError = AxiosError<Error>

export const useGetTagsIdInfinite = <TData = Awaited<ReturnType<typeof getTagsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTagsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetTagsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTagsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getTagsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsId>>> = ({ signal }) => getTagsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetTagsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsId>>>
export type GetTagsIdQueryError = AxiosError<Error>

export const useGetTagsId = <TData = Awaited<ReturnType<typeof getTagsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putTagsId = (
    id: number,
    tagRequest: TagRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TagResponse>> => {
    return axios.put(
      `/tags/${id}`,
      tagRequest,options
    );
  }



export const getPutTagsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTagsId>>, TError,{id: number;data: TagRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putTagsId>>, TError,{id: number;data: TagRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTagsId>>, {id: number;data: TagRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putTagsId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutTagsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTagsId>>>
    export type PutTagsIdMutationBody = TagRequest
    export type PutTagsIdMutationError = AxiosError<Error>

    export const usePutTagsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTagsId>>, TError,{id: number;data: TagRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutTagsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteTagsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/tags/${id}`,options
    );
  }



export const getDeleteTagsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTagsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTagsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTagsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTagsId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteTagsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTagsId>>>
    
    export type DeleteTagsIdMutationError = AxiosError<Error>

    export const useDeleteTagsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTagsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteTagsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    