/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  Error,
  UsersPermissionsUserRegistration,
  PostAuthLocalBody,
  PostAuthLocalRegisterBody,
  PostAuthForgotPassword200,
  PostAuthForgotPasswordBody,
  PostAuthResetPasswordBody,
  PostAuthChangePasswordBody,
  GetAuthEmailConfirmationParams,
  PostAuthSendEmailConfirmation200,
  PostAuthSendEmailConfirmationBody
} from '../../model'


/**
 * Redirects to provider login before being redirect to /auth/{provider}/callback
 * @summary Login with a provider
 */
export const getConnectProvider = (
    provider: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Error>> => {
    return axios.get(
      `/connect/${provider}`,options
    );
  }


export const getGetConnectProviderQueryKey = (provider: string,) => [`/connect/${provider}`] as const;
  

    
export const getGetConnectProviderQueryOptions = <TData = Awaited<ReturnType<typeof getConnectProvider>>, TError = AxiosError<void | Error>>(provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConnectProvider>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getConnectProvider>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConnectProviderQueryKey(provider);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnectProvider>>> = ({ signal }) => getConnectProvider(provider, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(provider), ...queryOptions}}

export type GetConnectProviderQueryResult = NonNullable<Awaited<ReturnType<typeof getConnectProvider>>>
export type GetConnectProviderQueryError = AxiosError<void | Error>

/**
 * @summary Login with a provider
 */
export const useGetConnectProvider = <TData = Awaited<ReturnType<typeof getConnectProvider>>, TError = AxiosError<void | Error>>(
 provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConnectProvider>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConnectProviderQueryOptions(provider,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Returns a jwt token and user info
 * @summary Local login
 */
export const postAuthLocal = (
    postAuthLocalBody: PostAuthLocalBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/local`,
      postAuthLocalBody,options
    );
  }



export const getPostAuthLocalMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocal>>, TError,{data: PostAuthLocalBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLocal>>, TError,{data: PostAuthLocalBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLocal>>, {data: PostAuthLocalBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLocal(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthLocalMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLocal>>>
    export type PostAuthLocalMutationBody = PostAuthLocalBody
    export type PostAuthLocalMutationError = AxiosError<Error>

    /**
 * @summary Local login
 */
export const usePostAuthLocal = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocal>>, TError,{data: PostAuthLocalBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthLocalMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Returns a jwt token and user info
 * @summary Register a user
 */
export const postAuthLocalRegister = (
    postAuthLocalRegisterBody: PostAuthLocalRegisterBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/local/register`,
      postAuthLocalRegisterBody,options
    );
  }



export const getPostAuthLocalRegisterMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocalRegister>>, TError,{data: PostAuthLocalRegisterBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLocalRegister>>, TError,{data: PostAuthLocalRegisterBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLocalRegister>>, {data: PostAuthLocalRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLocalRegister(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthLocalRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLocalRegister>>>
    export type PostAuthLocalRegisterMutationBody = PostAuthLocalRegisterBody
    export type PostAuthLocalRegisterMutationError = AxiosError<Error>

    /**
 * @summary Register a user
 */
export const usePostAuthLocalRegister = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocalRegister>>, TError,{data: PostAuthLocalRegisterBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthLocalRegisterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * @summary Default Callback from provider auth
 */
export const getAuthProviderCallback = (
    provider: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.get(
      `/auth/${provider}/callback`,options
    );
  }


export const getGetAuthProviderCallbackQueryKey = (provider: string,) => [`/auth/${provider}/callback`] as const;
  

    
export const getGetAuthProviderCallbackQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProviderCallback>>, TError = AxiosError<Error>>(provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthProviderCallback>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthProviderCallback>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProviderCallbackQueryKey(provider);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProviderCallback>>> = ({ signal }) => getAuthProviderCallback(provider, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(provider), ...queryOptions}}

export type GetAuthProviderCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProviderCallback>>>
export type GetAuthProviderCallbackQueryError = AxiosError<Error>

/**
 * @summary Default Callback from provider auth
 */
export const useGetAuthProviderCallback = <TData = Awaited<ReturnType<typeof getAuthProviderCallback>>, TError = AxiosError<Error>>(
 provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthProviderCallback>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProviderCallbackQueryOptions(provider,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary Send rest password email
 */
export const postAuthForgotPassword = (
    postAuthForgotPasswordBody: PostAuthForgotPasswordBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostAuthForgotPassword200>> => {
    return axios.post(
      `/auth/forgot-password`,
      postAuthForgotPasswordBody,options
    );
  }



export const getPostAuthForgotPasswordMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: PostAuthForgotPasswordBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: PostAuthForgotPasswordBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: PostAuthForgotPasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = PostAuthForgotPasswordBody
    export type PostAuthForgotPasswordMutationError = AxiosError<Error>

    /**
 * @summary Send rest password email
 */
export const usePostAuthForgotPassword = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: PostAuthForgotPasswordBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * @summary Rest user password
 */
export const postAuthResetPassword = (
    postAuthResetPasswordBody: PostAuthResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/reset-password`,
      postAuthResetPasswordBody,options
    );
  }



export const getPostAuthResetPasswordMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: PostAuthResetPasswordBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: PostAuthResetPasswordBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: PostAuthResetPasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = PostAuthResetPasswordBody
    export type PostAuthResetPasswordMutationError = AxiosError<Error>

    /**
 * @summary Rest user password
 */
export const usePostAuthResetPassword = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: PostAuthResetPasswordBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * @summary Update user's own password
 */
export const postAuthChangePassword = (
    postAuthChangePasswordBody: PostAuthChangePasswordBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/change-password`,
      postAuthChangePasswordBody,options
    );
  }



export const getPostAuthChangePasswordMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthChangePassword>>, TError,{data: PostAuthChangePasswordBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthChangePassword>>, TError,{data: PostAuthChangePasswordBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthChangePassword>>, {data: PostAuthChangePasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthChangePassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthChangePassword>>>
    export type PostAuthChangePasswordMutationBody = PostAuthChangePasswordBody
    export type PostAuthChangePasswordMutationError = AxiosError<Error>

    /**
 * @summary Update user's own password
 */
export const usePostAuthChangePassword = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthChangePassword>>, TError,{data: PostAuthChangePasswordBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthChangePasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * @summary Confirm user email
 */
export const getAuthEmailConfirmation = (
    params?: GetAuthEmailConfirmationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Error>> => {
    return axios.get(
      `/auth/email-confirmation`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAuthEmailConfirmationQueryKey = (params?: GetAuthEmailConfirmationParams,) => [`/auth/email-confirmation`, ...(params ? [params]: [])] as const;
  

    
export const getGetAuthEmailConfirmationQueryOptions = <TData = Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError = AxiosError<void | Error>>(params?: GetAuthEmailConfirmationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthEmailConfirmationQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthEmailConfirmation>>> = ({ signal }) => getAuthEmailConfirmation(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAuthEmailConfirmationQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthEmailConfirmation>>>
export type GetAuthEmailConfirmationQueryError = AxiosError<void | Error>

/**
 * @summary Confirm user email
 */
export const useGetAuthEmailConfirmation = <TData = Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError = AxiosError<void | Error>>(
 params?: GetAuthEmailConfirmationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthEmailConfirmationQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary Send confirmation email
 */
export const postAuthSendEmailConfirmation = (
    postAuthSendEmailConfirmationBody: PostAuthSendEmailConfirmationBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostAuthSendEmailConfirmation200>> => {
    return axios.post(
      `/auth/send-email-confirmation`,
      postAuthSendEmailConfirmationBody,options
    );
  }



export const getPostAuthSendEmailConfirmationMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, TError,{data: PostAuthSendEmailConfirmationBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, TError,{data: PostAuthSendEmailConfirmationBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, {data: PostAuthSendEmailConfirmationBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSendEmailConfirmation(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthSendEmailConfirmationMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>>
    export type PostAuthSendEmailConfirmationMutationBody = PostAuthSendEmailConfirmationBody
    export type PostAuthSendEmailConfirmationMutationError = AxiosError<Error>

    /**
 * @summary Send confirmation email
 */
export const usePostAuthSendEmailConfirmation = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, TError,{data: PostAuthSendEmailConfirmationBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthSendEmailConfirmationMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    