/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  TestListResponse,
  Error,
  GetTestsParams,
  TestResponse,
  TestRequest
} from '../../model'


export const getTests = (
    params?: GetTestsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TestListResponse>> => {
    return axios.get(
      `/tests`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetTestsQueryKey = (params?: GetTestsParams,) => [`/tests`, ...(params ? [params]: [])] as const;
  

    
export const getGetTestsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTests>>, TError = AxiosError<Error>>(params?: GetTestsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTests>>> = ({ signal }) => getTests(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetTestsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTests>>>
export type GetTestsInfiniteQueryError = AxiosError<Error>

export const useGetTestsInfinite = <TData = Awaited<ReturnType<typeof getTests>>, TError = AxiosError<Error>>(
 params?: GetTestsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetTestsQueryOptions = <TData = Awaited<ReturnType<typeof getTests>>, TError = AxiosError<Error>>(params?: GetTestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTests>>> = ({ signal }) => getTests(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetTestsQueryResult = NonNullable<Awaited<ReturnType<typeof getTests>>>
export type GetTestsQueryError = AxiosError<Error>

export const useGetTests = <TData = Awaited<ReturnType<typeof getTests>>, TError = AxiosError<Error>>(
 params?: GetTestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTests>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postTests = (
    testRequest: TestRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TestResponse>> => {
    return axios.post(
      `/tests`,
      testRequest,options
    );
  }



export const getPostTestsMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTests>>, TError,{data: TestRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postTests>>, TError,{data: TestRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTests>>, {data: TestRequest}> = (props) => {
          const {data} = props ?? {};

          return  postTests(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostTestsMutationResult = NonNullable<Awaited<ReturnType<typeof postTests>>>
    export type PostTestsMutationBody = TestRequest
    export type PostTestsMutationError = AxiosError<Error>

    export const usePostTests = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTests>>, TError,{data: TestRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostTestsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getTestsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TestResponse>> => {
    return axios.get(
      `/tests/${id}`,options
    );
  }


export const getGetTestsIdQueryKey = (id: number,) => [`/tests/${id}`] as const;
  

    
export const getGetTestsIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTestsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTestsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTestsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestsId>>> = ({ signal }) => getTestsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetTestsIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTestsId>>>
export type GetTestsIdInfiniteQueryError = AxiosError<Error>

export const useGetTestsIdInfinite = <TData = Awaited<ReturnType<typeof getTestsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTestsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestsIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetTestsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTestsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTestsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getTestsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestsId>>> = ({ signal }) => getTestsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetTestsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTestsId>>>
export type GetTestsIdQueryError = AxiosError<Error>

export const useGetTestsId = <TData = Awaited<ReturnType<typeof getTestsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTestsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTestsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putTestsId = (
    id: number,
    testRequest: TestRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TestResponse>> => {
    return axios.put(
      `/tests/${id}`,
      testRequest,options
    );
  }



export const getPutTestsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTestsId>>, TError,{id: number;data: TestRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putTestsId>>, TError,{id: number;data: TestRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTestsId>>, {id: number;data: TestRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putTestsId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutTestsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTestsId>>>
    export type PutTestsIdMutationBody = TestRequest
    export type PutTestsIdMutationError = AxiosError<Error>

    export const usePutTestsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTestsId>>, TError,{id: number;data: TestRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutTestsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteTestsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/tests/${id}`,options
    );
  }



export const getDeleteTestsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTestsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTestsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTestsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTestsId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteTestsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTestsId>>>
    
    export type DeleteTestsIdMutationError = AxiosError<Error>

    export const useDeleteTestsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTestsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteTestsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    