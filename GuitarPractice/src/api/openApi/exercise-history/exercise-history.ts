/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ExerciseHistoryResponse,
  Error,
  ExerciseHistoryRequest
} from '../../model'


export const getExerciseHistoryId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseHistoryResponse>> => {
    return axios.get(
      `/exercise-history/${id}`,options
    );
  }


export const getGetExerciseHistoryIdQueryKey = (id: number,) => [`/exercise-history/${id}`] as const;
  

    
export const getGetExerciseHistoryIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getExerciseHistoryId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getExerciseHistoryId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getExerciseHistoryId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExerciseHistoryIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExerciseHistoryId>>> = ({ signal }) => getExerciseHistoryId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetExerciseHistoryIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getExerciseHistoryId>>>
export type GetExerciseHistoryIdInfiniteQueryError = AxiosError<Error>

export const useGetExerciseHistoryIdInfinite = <TData = Awaited<ReturnType<typeof getExerciseHistoryId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getExerciseHistoryId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExerciseHistoryIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetExerciseHistoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getExerciseHistoryId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExerciseHistoryId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getExerciseHistoryId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExerciseHistoryIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExerciseHistoryId>>> = ({ signal }) => getExerciseHistoryId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetExerciseHistoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getExerciseHistoryId>>>
export type GetExerciseHistoryIdQueryError = AxiosError<Error>

export const useGetExerciseHistoryId = <TData = Awaited<ReturnType<typeof getExerciseHistoryId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExerciseHistoryId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExerciseHistoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postExerciseHistory = (
    exerciseHistoryRequest: ExerciseHistoryRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseHistoryResponse>> => {
    return axios.post(
      `/exercise-history/`,
      exerciseHistoryRequest,options
    );
  }



export const getPostExerciseHistoryMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExerciseHistory>>, TError,{data: ExerciseHistoryRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postExerciseHistory>>, TError,{data: ExerciseHistoryRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postExerciseHistory>>, {data: ExerciseHistoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  postExerciseHistory(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostExerciseHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof postExerciseHistory>>>
    export type PostExerciseHistoryMutationBody = ExerciseHistoryRequest
    export type PostExerciseHistoryMutationError = AxiosError<Error>

    export const usePostExerciseHistory = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExerciseHistory>>, TError,{data: ExerciseHistoryRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostExerciseHistoryMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    