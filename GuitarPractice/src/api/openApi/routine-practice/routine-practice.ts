/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  RoutinePracticeResponse,
  Error,
  RoutinePracticeRequest
} from '../../model'


export const postRoutinePractice = (
    routinePracticeRequest: RoutinePracticeRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutinePracticeResponse>> => {
    return axios.post(
      `/routine-practice/`,
      routinePracticeRequest,options
    );
  }



export const getPostRoutinePracticeMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutinePractice>>, TError,{data: RoutinePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutinePractice>>, TError,{data: RoutinePracticeRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutinePractice>>, {data: RoutinePracticeRequest}> = (props) => {
          const {data} = props ?? {};

          return  postRoutinePractice(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutinePracticeMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutinePractice>>>
    export type PostRoutinePracticeMutationBody = RoutinePracticeRequest
    export type PostRoutinePracticeMutationError = AxiosError<Error>

    export const usePostRoutinePractice = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutinePractice>>, TError,{data: RoutinePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutinePracticeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    