/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  RoutinePracticeListResponse,
  Error,
  GetRoutinePracticesParams,
  RoutinePracticeResponse,
  RoutinePracticeRequest
} from '../../model'


export const getRoutinePractices = (
    params?: GetRoutinePracticesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutinePracticeListResponse>> => {
    return axios.get(
      `/routine-practices`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRoutinePracticesQueryKey = (params?: GetRoutinePracticesParams,) => [`/routine-practices`, ...(params ? [params]: [])] as const;
  

    
export const getGetRoutinePracticesQueryOptions = <TData = Awaited<ReturnType<typeof getRoutinePractices>>, TError = AxiosError<Error>>(params?: GetRoutinePracticesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutinePractices>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutinePractices>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutinePracticesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutinePractices>>> = ({ signal }) => getRoutinePractices(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetRoutinePracticesQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutinePractices>>>
export type GetRoutinePracticesQueryError = AxiosError<Error>

export const useGetRoutinePractices = <TData = Awaited<ReturnType<typeof getRoutinePractices>>, TError = AxiosError<Error>>(
 params?: GetRoutinePracticesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutinePractices>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutinePracticesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postRoutinePractices = (
    routinePracticeRequest: RoutinePracticeRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutinePracticeResponse>> => {
    return axios.post(
      `/routine-practices`,
      routinePracticeRequest,options
    );
  }



export const getPostRoutinePracticesMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutinePractices>>, TError,{data: RoutinePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutinePractices>>, TError,{data: RoutinePracticeRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutinePractices>>, {data: RoutinePracticeRequest}> = (props) => {
          const {data} = props ?? {};

          return  postRoutinePractices(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutinePracticesMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutinePractices>>>
    export type PostRoutinePracticesMutationBody = RoutinePracticeRequest
    export type PostRoutinePracticesMutationError = AxiosError<Error>

    export const usePostRoutinePractices = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutinePractices>>, TError,{data: RoutinePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutinePracticesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getRoutinePracticesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutinePracticeResponse>> => {
    return axios.get(
      `/routine-practices/${id}`,options
    );
  }


export const getGetRoutinePracticesIdQueryKey = (id: number,) => [`/routine-practices/${id}`] as const;
  

    
export const getGetRoutinePracticesIdQueryOptions = <TData = Awaited<ReturnType<typeof getRoutinePracticesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutinePracticesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutinePracticesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutinePracticesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutinePracticesId>>> = ({ signal }) => getRoutinePracticesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetRoutinePracticesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutinePracticesId>>>
export type GetRoutinePracticesIdQueryError = AxiosError<Error>

export const useGetRoutinePracticesId = <TData = Awaited<ReturnType<typeof getRoutinePracticesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutinePracticesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutinePracticesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putRoutinePracticesId = (
    id: number,
    routinePracticeRequest: RoutinePracticeRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutinePracticeResponse>> => {
    return axios.put(
      `/routine-practices/${id}`,
      routinePracticeRequest,options
    );
  }



export const getPutRoutinePracticesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRoutinePracticesId>>, TError,{id: number;data: RoutinePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putRoutinePracticesId>>, TError,{id: number;data: RoutinePracticeRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRoutinePracticesId>>, {id: number;data: RoutinePracticeRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putRoutinePracticesId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutRoutinePracticesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putRoutinePracticesId>>>
    export type PutRoutinePracticesIdMutationBody = RoutinePracticeRequest
    export type PutRoutinePracticesIdMutationError = AxiosError<Error>

    export const usePutRoutinePracticesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRoutinePracticesId>>, TError,{id: number;data: RoutinePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutRoutinePracticesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteRoutinePracticesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/routine-practices/${id}`,options
    );
  }



export const getDeleteRoutinePracticesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutinePracticesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRoutinePracticesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRoutinePracticesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteRoutinePracticesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRoutinePracticesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoutinePracticesId>>>
    
    export type DeleteRoutinePracticesIdMutationError = AxiosError<Error>

    export const useDeleteRoutinePracticesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutinePracticesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteRoutinePracticesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    