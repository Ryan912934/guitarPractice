/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ExerciseListResponse,
  Error,
  GetExercisesParams,
  ExerciseResponse,
  ExerciseRequest
} from '../../model'


export const getExercises = (
    params?: GetExercisesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseListResponse>> => {
    return axios.get(
      `/exercises`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetExercisesQueryKey = (params?: GetExercisesParams,) => [`/exercises`, ...(params ? [params]: [])] as const;
  

    
export const getGetExercisesQueryOptions = <TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<Error>>(params?: GetExercisesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercises>>> = ({ signal }) => getExercises(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetExercisesQueryResult = NonNullable<Awaited<ReturnType<typeof getExercises>>>
export type GetExercisesQueryError = AxiosError<Error>

export const useGetExercises = <TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<Error>>(
 params?: GetExercisesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExercisesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postExercises = (
    exerciseRequest: ExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseResponse>> => {
    return axios.post(
      `/exercises`,
      exerciseRequest,options
    );
  }



export const getPostExercisesMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExercises>>, TError,{data: ExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postExercises>>, TError,{data: ExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postExercises>>, {data: ExerciseRequest}> = (props) => {
          const {data} = props ?? {};

          return  postExercises(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostExercisesMutationResult = NonNullable<Awaited<ReturnType<typeof postExercises>>>
    export type PostExercisesMutationBody = ExerciseRequest
    export type PostExercisesMutationError = AxiosError<Error>

    export const usePostExercises = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExercises>>, TError,{data: ExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostExercisesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getExercisesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseResponse>> => {
    return axios.get(
      `/exercises/${id}`,options
    );
  }


export const getGetExercisesIdQueryKey = (id: number,) => [`/exercises/${id}`] as const;
  

    
export const getGetExercisesIdQueryOptions = <TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercisesId>>> = ({ signal }) => getExercisesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetExercisesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getExercisesId>>>
export type GetExercisesIdQueryError = AxiosError<Error>

export const useGetExercisesId = <TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExercisesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putExercisesId = (
    id: number,
    exerciseRequest: ExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseResponse>> => {
    return axios.put(
      `/exercises/${id}`,
      exerciseRequest,options
    );
  }



export const getPutExercisesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putExercisesId>>, TError,{id: number;data: ExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putExercisesId>>, TError,{id: number;data: ExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putExercisesId>>, {id: number;data: ExerciseRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putExercisesId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutExercisesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putExercisesId>>>
    export type PutExercisesIdMutationBody = ExerciseRequest
    export type PutExercisesIdMutationError = AxiosError<Error>

    export const usePutExercisesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putExercisesId>>, TError,{id: number;data: ExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutExercisesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteExercisesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/exercises/${id}`,options
    );
  }



export const getDeleteExercisesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExercisesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteExercisesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteExercisesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteExercisesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteExercisesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExercisesId>>>
    
    export type DeleteExercisesIdMutationError = AxiosError<Error>

    export const useDeleteExercisesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExercisesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteExercisesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    