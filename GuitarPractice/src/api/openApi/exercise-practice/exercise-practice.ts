/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ExercisePracticeListResponse,
  Error,
  GetExercisePracticesParams,
  ExercisePracticeResponse,
  ExercisePracticeRequest
} from '../../model'


export const getExercisePractices = (
    params?: GetExercisePracticesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExercisePracticeListResponse>> => {
    return axios.get(
      `/exercise-practices`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetExercisePracticesQueryKey = (params?: GetExercisePracticesParams,) => [`/exercise-practices`, ...(params ? [params]: [])] as const;
  

    
export const getGetExercisePracticesQueryOptions = <TData = Awaited<ReturnType<typeof getExercisePractices>>, TError = AxiosError<Error>>(params?: GetExercisePracticesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercisePractices>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getExercisePractices>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisePracticesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercisePractices>>> = ({ signal }) => getExercisePractices(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetExercisePracticesQueryResult = NonNullable<Awaited<ReturnType<typeof getExercisePractices>>>
export type GetExercisePracticesQueryError = AxiosError<Error>

export const useGetExercisePractices = <TData = Awaited<ReturnType<typeof getExercisePractices>>, TError = AxiosError<Error>>(
 params?: GetExercisePracticesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercisePractices>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExercisePracticesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postExercisePractices = (
    exercisePracticeRequest: ExercisePracticeRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExercisePracticeResponse>> => {
    return axios.post(
      `/exercise-practices`,
      exercisePracticeRequest,options
    );
  }



export const getPostExercisePracticesMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExercisePractices>>, TError,{data: ExercisePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postExercisePractices>>, TError,{data: ExercisePracticeRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postExercisePractices>>, {data: ExercisePracticeRequest}> = (props) => {
          const {data} = props ?? {};

          return  postExercisePractices(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostExercisePracticesMutationResult = NonNullable<Awaited<ReturnType<typeof postExercisePractices>>>
    export type PostExercisePracticesMutationBody = ExercisePracticeRequest
    export type PostExercisePracticesMutationError = AxiosError<Error>

    export const usePostExercisePractices = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExercisePractices>>, TError,{data: ExercisePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostExercisePracticesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getExercisePracticesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExercisePracticeResponse>> => {
    return axios.get(
      `/exercise-practices/${id}`,options
    );
  }


export const getGetExercisePracticesIdQueryKey = (id: number,) => [`/exercise-practices/${id}`] as const;
  

    
export const getGetExercisePracticesIdQueryOptions = <TData = Awaited<ReturnType<typeof getExercisePracticesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercisePracticesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getExercisePracticesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisePracticesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercisePracticesId>>> = ({ signal }) => getExercisePracticesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetExercisePracticesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getExercisePracticesId>>>
export type GetExercisePracticesIdQueryError = AxiosError<Error>

export const useGetExercisePracticesId = <TData = Awaited<ReturnType<typeof getExercisePracticesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getExercisePracticesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetExercisePracticesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putExercisePracticesId = (
    id: number,
    exercisePracticeRequest: ExercisePracticeRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExercisePracticeResponse>> => {
    return axios.put(
      `/exercise-practices/${id}`,
      exercisePracticeRequest,options
    );
  }



export const getPutExercisePracticesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putExercisePracticesId>>, TError,{id: number;data: ExercisePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putExercisePracticesId>>, TError,{id: number;data: ExercisePracticeRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putExercisePracticesId>>, {id: number;data: ExercisePracticeRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putExercisePracticesId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutExercisePracticesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putExercisePracticesId>>>
    export type PutExercisePracticesIdMutationBody = ExercisePracticeRequest
    export type PutExercisePracticesIdMutationError = AxiosError<Error>

    export const usePutExercisePracticesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putExercisePracticesId>>, TError,{id: number;data: ExercisePracticeRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutExercisePracticesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteExercisePracticesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/exercise-practices/${id}`,options
    );
  }



export const getDeleteExercisePracticesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExercisePracticesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteExercisePracticesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteExercisePracticesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteExercisePracticesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteExercisePracticesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExercisePracticesId>>>
    
    export type DeleteExercisePracticesIdMutationError = AxiosError<Error>

    export const useDeleteExercisePracticesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExercisePracticesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteExercisePracticesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    