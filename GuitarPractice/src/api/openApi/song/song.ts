/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  SongResponse,
  Error,
  SongRequest
} from '../../model'


export const getSong = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SongResponse>> => {
    return axios.get(
      `/song/`,options
    );
  }


export const getGetSongQueryKey = () => [`/song/`] as const;
  

    
export const getGetSongInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getSong>>, TError = AxiosError<Error>>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSongQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSong>>> = ({ signal }) => getSong({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetSongInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSong>>>
export type GetSongInfiniteQueryError = AxiosError<Error>

export const useGetSongInfinite = <TData = Awaited<ReturnType<typeof getSong>>, TError = AxiosError<Error>>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSongInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetSongQueryOptions = <TData = Awaited<ReturnType<typeof getSong>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSongQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSong>>> = ({ signal }) => getSong({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetSongQueryResult = NonNullable<Awaited<ReturnType<typeof getSong>>>
export type GetSongQueryError = AxiosError<Error>

export const useGetSong = <TData = Awaited<ReturnType<typeof getSong>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSongQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postSong = (
    songRequest: SongRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SongResponse>> => {
    return axios.post(
      `/song/`,
      songRequest,options
    );
  }



export const getPostSongMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSong>>, TError,{data: SongRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postSong>>, TError,{data: SongRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSong>>, {data: SongRequest}> = (props) => {
          const {data} = props ?? {};

          return  postSong(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostSongMutationResult = NonNullable<Awaited<ReturnType<typeof postSong>>>
    export type PostSongMutationBody = SongRequest
    export type PostSongMutationError = AxiosError<Error>

    export const usePostSong = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSong>>, TError,{data: SongRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostSongMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteSongId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/song/${id}`,options
    );
  }



export const getDeleteSongIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSongId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSongId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSongId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteSongId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSongIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSongId>>>
    
    export type DeleteSongIdMutationError = AxiosError<Error>

    export const useDeleteSongId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSongId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteSongIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getSongId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SongResponse>> => {
    return axios.get(
      `/song/${id}`,options
    );
  }


export const getGetSongIdQueryKey = (id: number,) => [`/song/${id}`] as const;
  

    
export const getGetSongIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getSongId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSongId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSongId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSongIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSongId>>> = ({ signal }) => getSongId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetSongIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSongId>>>
export type GetSongIdInfiniteQueryError = AxiosError<Error>

export const useGetSongIdInfinite = <TData = Awaited<ReturnType<typeof getSongId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSongId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSongIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetSongIdQueryOptions = <TData = Awaited<ReturnType<typeof getSongId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSongId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getSongId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSongIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSongId>>> = ({ signal }) => getSongId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetSongIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSongId>>>
export type GetSongIdQueryError = AxiosError<Error>

export const useGetSongId = <TData = Awaited<ReturnType<typeof getSongId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSongId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSongIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postSongId = (
    id: number,
    songRequest: SongRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SongResponse>> => {
    return axios.post(
      `/song/${id}`,
      songRequest,options
    );
  }



export const getPostSongIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSongId>>, TError,{id: number;data: SongRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postSongId>>, TError,{id: number;data: SongRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSongId>>, {id: number;data: SongRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postSongId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostSongIdMutationResult = NonNullable<Awaited<ReturnType<typeof postSongId>>>
    export type PostSongIdMutationBody = SongRequest
    export type PostSongIdMutationError = AxiosError<Error>

    export const usePostSongId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSongId>>, TError,{id: number;data: SongRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostSongIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    