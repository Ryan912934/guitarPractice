/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  UploadFile,
  PostUploadBody
} from '../../model'


/**
 * Upload files
 */
export const postUpload = (
    postUploadBody: PostUploadBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile[]>> => {const formData = new FormData();
if(postUploadBody.path !== undefined) {
 formData.append('path', postUploadBody.path)
 }
if(postUploadBody.refId !== undefined) {
 formData.append('refId', postUploadBody.refId)
 }
if(postUploadBody.ref !== undefined) {
 formData.append('ref', postUploadBody.ref)
 }
if(postUploadBody.field !== undefined) {
 formData.append('field', postUploadBody.field)
 }
postUploadBody.files.forEach(value => formData.append('files', value));

    return axios.post(
      `/upload`,
      formData,options
    );
  }



export const getPostUploadMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUpload>>, {data: PostUploadBody}> = (props) => {
          const {data} = props ?? {};

          return  postUpload(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postUpload>>>
    export type PostUploadMutationBody = PostUploadBody
    export type PostUploadMutationError = AxiosError<unknown>

    export const usePostUpload = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostUploadMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getUploadFiles = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile[]>> => {
    return axios.get(
      `/upload/files`,options
    );
  }


export const getGetUploadFilesQueryKey = () => [`/upload/files`] as const;
  

    
export const getGetUploadFilesQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFiles>>> = ({ signal }) => getUploadFiles({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUploadFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFiles>>>
export type GetUploadFilesQueryError = AxiosError<unknown>

export const useGetUploadFiles = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getUploadFilesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile>> => {
    return axios.get(
      `/upload/files/${id}`,options
    );
  }


export const getGetUploadFilesIdQueryKey = (id: string,) => [`/upload/files/${id}`] as const;
  

    
export const getGetUploadFilesIdQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFilesId>>> = ({ signal }) => getUploadFilesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetUploadFilesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFilesId>>>
export type GetUploadFilesIdQueryError = AxiosError<unknown>

export const useGetUploadFilesId = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const deleteUploadFilesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile>> => {
    return axios.delete(
      `/upload/files/${id}`,options
    );
  }



export const getDeleteUploadFilesIdMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUploadFilesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUploadFilesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteUploadFilesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUploadFilesId>>>
    
    export type DeleteUploadFilesIdMutationError = AxiosError<unknown>

    export const useDeleteUploadFilesId = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteUploadFilesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    