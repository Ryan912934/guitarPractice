/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  UploadFileListResponse,
  Error,
  GetUploadFilesParams,
  UploadFileResponse
} from '../../model'


export const getUploadFiles = (
    params?: GetUploadFilesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFileListResponse>> => {
    return axios.get(
      `/upload/files`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUploadFilesQueryKey = (params?: GetUploadFilesParams,) => [`/upload/files`, ...(params ? [params]: [])] as const;
  

    
export const getGetUploadFilesInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<Error>>(params?: GetUploadFilesParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFiles>>> = ({ signal }) => getUploadFiles(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetUploadFilesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFiles>>>
export type GetUploadFilesInfiniteQueryError = AxiosError<Error>

export const useGetUploadFilesInfinite = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<Error>>(
 params?: GetUploadFilesParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetUploadFilesQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<Error>>(params?: GetUploadFilesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFiles>>> = ({ signal }) => getUploadFiles(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetUploadFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFiles>>>
export type GetUploadFilesQueryError = AxiosError<Error>

export const useGetUploadFiles = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<Error>>(
 params?: GetUploadFilesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getUploadFilesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFileResponse>> => {
    return axios.get(
      `/upload/files/${id}`,options
    );
  }


export const getGetUploadFilesIdQueryKey = (id: number,) => [`/upload/files/${id}`] as const;
  

    
export const getGetUploadFilesIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFilesId>>> = ({ signal }) => getUploadFilesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetUploadFilesIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFilesId>>>
export type GetUploadFilesIdInfiniteQueryError = AxiosError<Error>

export const useGetUploadFilesIdInfinite = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetUploadFilesIdQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFilesId>>> = ({ signal }) => getUploadFilesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetUploadFilesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFilesId>>>
export type GetUploadFilesIdQueryError = AxiosError<Error>

export const useGetUploadFilesId = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const deleteUploadFilesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/upload/files/${id}`,options
    );
  }



export const getDeleteUploadFilesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUploadFilesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUploadFilesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteUploadFilesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUploadFilesId>>>
    
    export type DeleteUploadFilesIdMutationError = AxiosError<Error>

    export const useDeleteUploadFilesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteUploadFilesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    