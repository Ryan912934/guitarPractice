/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  RoutineResponse,
  Error,
  RoutineRequest
} from '../../model'


export const getRoutine = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.get(
      `/routine/`,options
    );
  }


export const getGetRoutineQueryKey = () => [`/routine/`] as const;
  

    
export const getGetRoutineInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getRoutine>>, TError = AxiosError<Error>>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoutine>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoutine>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutineQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutine>>> = ({ signal }) => getRoutine({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetRoutineInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutine>>>
export type GetRoutineInfiniteQueryError = AxiosError<Error>

export const useGetRoutineInfinite = <TData = Awaited<ReturnType<typeof getRoutine>>, TError = AxiosError<Error>>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoutine>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutineInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetRoutineQueryOptions = <TData = Awaited<ReturnType<typeof getRoutine>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutine>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutine>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutineQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutine>>> = ({ signal }) => getRoutine({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions}}

export type GetRoutineQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutine>>>
export type GetRoutineQueryError = AxiosError<Error>

export const useGetRoutine = <TData = Awaited<ReturnType<typeof getRoutine>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutine>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutineQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postRoutine = (
    routineRequest: RoutineRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.post(
      `/routine/`,
      routineRequest,options
    );
  }



export const getPostRoutineMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutine>>, TError,{data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutine>>, TError,{data: RoutineRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutine>>, {data: RoutineRequest}> = (props) => {
          const {data} = props ?? {};

          return  postRoutine(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutine>>>
    export type PostRoutineMutationBody = RoutineRequest
    export type PostRoutineMutationError = AxiosError<Error>

    export const usePostRoutine = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutine>>, TError,{data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getRoutineId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.get(
      `/routine/${id}`,options
    );
  }


export const getGetRoutineIdQueryKey = (id: number,) => [`/routine/${id}`] as const;
  

    
export const getGetRoutineIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getRoutineId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoutineId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoutineId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutineIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutineId>>> = ({ signal }) => getRoutineId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetRoutineIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutineId>>>
export type GetRoutineIdInfiniteQueryError = AxiosError<Error>

export const useGetRoutineIdInfinite = <TData = Awaited<ReturnType<typeof getRoutineId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoutineId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutineIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const getGetRoutineIdQueryOptions = <TData = Awaited<ReturnType<typeof getRoutineId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutineId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutineId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutineIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutineId>>> = ({ signal }) => getRoutineId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions}}

export type GetRoutineIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutineId>>>
export type GetRoutineIdQueryError = AxiosError<Error>

export const useGetRoutineId = <TData = Awaited<ReturnType<typeof getRoutineId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutineId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutineIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postRoutineId = (
    id: number,
    routineRequest: RoutineRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.post(
      `/routine/${id}`,
      routineRequest,options
    );
  }



export const getPostRoutineIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineId>>, TError,{id: number;data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutineId>>, TError,{id: number;data: RoutineRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutineId>>, {id: number;data: RoutineRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postRoutineId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineIdMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutineId>>>
    export type PostRoutineIdMutationBody = RoutineRequest
    export type PostRoutineIdMutationError = AxiosError<Error>

    export const usePostRoutineId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineId>>, TError,{id: number;data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    