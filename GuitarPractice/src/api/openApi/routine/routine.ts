/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  RoutineListResponse,
  Error,
  GetRoutinesParams,
  RoutineResponse,
  RoutineRequest
} from '../../model'


export const getRoutines = (
    params?: GetRoutinesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineListResponse>> => {
    return axios.get(
      `/routines`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRoutinesQueryKey = (params?: GetRoutinesParams,) => [`/routines`, ...(params ? [params]: [])] as const;
  

    
export const getGetRoutinesQueryOptions = <TData = Awaited<ReturnType<typeof getRoutines>>, TError = AxiosError<Error>>(params?: GetRoutinesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutines>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutines>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutinesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutines>>> = ({ signal }) => getRoutines(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetRoutinesQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutines>>>
export type GetRoutinesQueryError = AxiosError<Error>

export const useGetRoutines = <TData = Awaited<ReturnType<typeof getRoutines>>, TError = AxiosError<Error>>(
 params?: GetRoutinesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutines>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutinesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postRoutines = (
    routineRequest: RoutineRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.post(
      `/routines`,
      routineRequest,options
    );
  }



export const getPostRoutinesMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutines>>, TError,{data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutines>>, TError,{data: RoutineRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutines>>, {data: RoutineRequest}> = (props) => {
          const {data} = props ?? {};

          return  postRoutines(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutinesMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutines>>>
    export type PostRoutinesMutationBody = RoutineRequest
    export type PostRoutinesMutationError = AxiosError<Error>

    export const usePostRoutines = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutines>>, TError,{data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutinesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getRoutinesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.get(
      `/routines/${id}`,options
    );
  }


export const getGetRoutinesIdQueryKey = (id: number,) => [`/routines/${id}`] as const;
  

    
export const getGetRoutinesIdQueryOptions = <TData = Awaited<ReturnType<typeof getRoutinesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutinesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutinesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutinesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutinesId>>> = ({ signal }) => getRoutinesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetRoutinesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutinesId>>>
export type GetRoutinesIdQueryError = AxiosError<Error>

export const useGetRoutinesId = <TData = Awaited<ReturnType<typeof getRoutinesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutinesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutinesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putRoutinesId = (
    id: number,
    routineRequest: RoutineRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineResponse>> => {
    return axios.put(
      `/routines/${id}`,
      routineRequest,options
    );
  }



export const getPutRoutinesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRoutinesId>>, TError,{id: number;data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putRoutinesId>>, TError,{id: number;data: RoutineRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRoutinesId>>, {id: number;data: RoutineRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putRoutinesId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutRoutinesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putRoutinesId>>>
    export type PutRoutinesIdMutationBody = RoutineRequest
    export type PutRoutinesIdMutationError = AxiosError<Error>

    export const usePutRoutinesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRoutinesId>>, TError,{id: number;data: RoutineRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutRoutinesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteRoutinesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/routines/${id}`,options
    );
  }



export const getDeleteRoutinesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutinesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRoutinesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRoutinesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteRoutinesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRoutinesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoutinesId>>>
    
    export type DeleteRoutinesIdMutationError = AxiosError<Error>

    export const useDeleteRoutinesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutinesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteRoutinesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    