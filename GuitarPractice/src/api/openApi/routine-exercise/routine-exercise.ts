/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  RoutineExerciseResponse,
  Error,
  RoutineExerciseRequest
} from '../../model'


export const postRoutineExerciseIdUp = (
    id: number,
    routineExerciseRequest: RoutineExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.post(
      `/routine-exercise/${id}/up`,
      routineExerciseRequest,options
    );
  }



export const getPostRoutineExerciseIdUpMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseIdUp>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseIdUp>>, TError,{id: number;data: RoutineExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutineExerciseIdUp>>, {id: number;data: RoutineExerciseRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postRoutineExerciseIdUp(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineExerciseIdUpMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutineExerciseIdUp>>>
    export type PostRoutineExerciseIdUpMutationBody = RoutineExerciseRequest
    export type PostRoutineExerciseIdUpMutationError = AxiosError<Error>

    export const usePostRoutineExerciseIdUp = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseIdUp>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineExerciseIdUpMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const postRoutineExerciseIdDown = (
    id: number,
    routineExerciseRequest: RoutineExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.post(
      `/routine-exercise/${id}/down`,
      routineExerciseRequest,options
    );
  }



export const getPostRoutineExerciseIdDownMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseIdDown>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseIdDown>>, TError,{id: number;data: RoutineExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutineExerciseIdDown>>, {id: number;data: RoutineExerciseRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postRoutineExerciseIdDown(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineExerciseIdDownMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutineExerciseIdDown>>>
    export type PostRoutineExerciseIdDownMutationBody = RoutineExerciseRequest
    export type PostRoutineExerciseIdDownMutationError = AxiosError<Error>

    export const usePostRoutineExerciseIdDown = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseIdDown>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineExerciseIdDownMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteRoutineExerciseRoutineIdOrder = (
    routineId: number,
    order: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/routine-exercise/${routineId}/${order}`,options
    );
  }



export const getDeleteRoutineExerciseRoutineIdOrderMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutineExerciseRoutineIdOrder>>, TError,{routineId: number;order: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRoutineExerciseRoutineIdOrder>>, TError,{routineId: number;order: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRoutineExerciseRoutineIdOrder>>, {routineId: number;order: number}> = (props) => {
          const {routineId,order} = props ?? {};

          return  deleteRoutineExerciseRoutineIdOrder(routineId,order,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRoutineExerciseRoutineIdOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoutineExerciseRoutineIdOrder>>>
    
    export type DeleteRoutineExerciseRoutineIdOrderMutationError = AxiosError<Error>

    export const useDeleteRoutineExerciseRoutineIdOrder = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutineExerciseRoutineIdOrder>>, TError,{routineId: number;order: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteRoutineExerciseRoutineIdOrderMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const postRoutineExercise = (
    routineExerciseRequest: RoutineExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.post(
      `/routine-exercise/`,
      routineExerciseRequest,options
    );
  }



export const getPostRoutineExerciseMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExercise>>, TError,{data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutineExercise>>, TError,{data: RoutineExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutineExercise>>, {data: RoutineExerciseRequest}> = (props) => {
          const {data} = props ?? {};

          return  postRoutineExercise(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineExerciseMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutineExercise>>>
    export type PostRoutineExerciseMutationBody = RoutineExerciseRequest
    export type PostRoutineExerciseMutationError = AxiosError<Error>

    export const usePostRoutineExercise = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExercise>>, TError,{data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineExerciseMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const postRoutineExerciseId = (
    id: number,
    routineExerciseRequest: RoutineExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.post(
      `/routine-exercise/${id}`,
      routineExerciseRequest,options
    );
  }



export const getPostRoutineExerciseIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseId>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseId>>, TError,{id: number;data: RoutineExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutineExerciseId>>, {id: number;data: RoutineExerciseRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postRoutineExerciseId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineExerciseIdMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutineExerciseId>>>
    export type PostRoutineExerciseIdMutationBody = RoutineExerciseRequest
    export type PostRoutineExerciseIdMutationError = AxiosError<Error>

    export const usePostRoutineExerciseId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExerciseId>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineExerciseIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    