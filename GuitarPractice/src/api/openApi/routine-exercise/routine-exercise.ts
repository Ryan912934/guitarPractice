/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  RoutineExerciseListResponse,
  Error,
  GetRoutineExercisesParams,
  RoutineExerciseResponse,
  RoutineExerciseRequest
} from '../../model'


export const getRoutineExercises = (
    params?: GetRoutineExercisesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseListResponse>> => {
    return axios.get(
      `/routine-exercises`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRoutineExercisesQueryKey = (params?: GetRoutineExercisesParams,) => [`/routine-exercises`, ...(params ? [params]: [])] as const;
  

    
export const getGetRoutineExercisesQueryOptions = <TData = Awaited<ReturnType<typeof getRoutineExercises>>, TError = AxiosError<Error>>(params?: GetRoutineExercisesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutineExercises>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutineExercises>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutineExercisesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutineExercises>>> = ({ signal }) => getRoutineExercises(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetRoutineExercisesQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutineExercises>>>
export type GetRoutineExercisesQueryError = AxiosError<Error>

export const useGetRoutineExercises = <TData = Awaited<ReturnType<typeof getRoutineExercises>>, TError = AxiosError<Error>>(
 params?: GetRoutineExercisesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutineExercises>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutineExercisesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postRoutineExercises = (
    routineExerciseRequest: RoutineExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.post(
      `/routine-exercises`,
      routineExerciseRequest,options
    );
  }



export const getPostRoutineExercisesMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExercises>>, TError,{data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRoutineExercises>>, TError,{data: RoutineExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRoutineExercises>>, {data: RoutineExerciseRequest}> = (props) => {
          const {data} = props ?? {};

          return  postRoutineExercises(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostRoutineExercisesMutationResult = NonNullable<Awaited<ReturnType<typeof postRoutineExercises>>>
    export type PostRoutineExercisesMutationBody = RoutineExerciseRequest
    export type PostRoutineExercisesMutationError = AxiosError<Error>

    export const usePostRoutineExercises = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRoutineExercises>>, TError,{data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostRoutineExercisesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getRoutineExercisesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.get(
      `/routine-exercises/${id}`,options
    );
  }


export const getGetRoutineExercisesIdQueryKey = (id: number,) => [`/routine-exercises/${id}`] as const;
  

    
export const getGetRoutineExercisesIdQueryOptions = <TData = Awaited<ReturnType<typeof getRoutineExercisesId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutineExercisesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getRoutineExercisesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutineExercisesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutineExercisesId>>> = ({ signal }) => getRoutineExercisesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetRoutineExercisesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutineExercisesId>>>
export type GetRoutineExercisesIdQueryError = AxiosError<Error>

export const useGetRoutineExercisesId = <TData = Awaited<ReturnType<typeof getRoutineExercisesId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoutineExercisesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoutineExercisesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putRoutineExercisesId = (
    id: number,
    routineExerciseRequest: RoutineExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoutineExerciseResponse>> => {
    return axios.put(
      `/routine-exercises/${id}`,
      routineExerciseRequest,options
    );
  }



export const getPutRoutineExercisesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRoutineExercisesId>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putRoutineExercisesId>>, TError,{id: number;data: RoutineExerciseRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRoutineExercisesId>>, {id: number;data: RoutineExerciseRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putRoutineExercisesId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutRoutineExercisesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putRoutineExercisesId>>>
    export type PutRoutineExercisesIdMutationBody = RoutineExerciseRequest
    export type PutRoutineExercisesIdMutationError = AxiosError<Error>

    export const usePutRoutineExercisesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRoutineExercisesId>>, TError,{id: number;data: RoutineExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutRoutineExercisesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteRoutineExercisesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/routine-exercises/${id}`,options
    );
  }



export const getDeleteRoutineExercisesIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutineExercisesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRoutineExercisesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRoutineExercisesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteRoutineExercisesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRoutineExercisesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoutineExercisesId>>>
    
    export type DeleteRoutineExercisesIdMutationError = AxiosError<Error>

    export const useDeleteRoutineExercisesId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoutineExercisesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteRoutineExercisesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    