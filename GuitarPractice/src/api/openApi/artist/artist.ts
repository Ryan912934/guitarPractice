/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ArtistListResponse,
  Error,
  GetArtistsParams,
  ArtistResponse,
  ArtistRequest
} from '../../model'


export const getArtists = (
    params?: GetArtistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArtistListResponse>> => {
    return axios.get(
      `/artists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetArtistsQueryKey = (params?: GetArtistsParams,) => [`/artists`, ...(params ? [params]: [])] as const;
  

    
export const getGetArtistsQueryOptions = <TData = Awaited<ReturnType<typeof getArtists>>, TError = AxiosError<Error>>(params?: GetArtistsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArtists>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getArtists>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetArtistsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArtists>>> = ({ signal }) => getArtists(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof getArtists>>>
export type GetArtistsQueryError = AxiosError<Error>

export const useGetArtists = <TData = Awaited<ReturnType<typeof getArtists>>, TError = AxiosError<Error>>(
 params?: GetArtistsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArtists>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetArtistsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const postArtists = (
    artistRequest: ArtistRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArtistResponse>> => {
    return axios.post(
      `/artists`,
      artistRequest,options
    );
  }



export const getPostArtistsMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArtists>>, TError,{data: ArtistRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postArtists>>, TError,{data: ArtistRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postArtists>>, {data: ArtistRequest}> = (props) => {
          const {data} = props ?? {};

          return  postArtists(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostArtistsMutationResult = NonNullable<Awaited<ReturnType<typeof postArtists>>>
    export type PostArtistsMutationBody = ArtistRequest
    export type PostArtistsMutationError = AxiosError<Error>

    export const usePostArtists = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArtists>>, TError,{data: ArtistRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostArtistsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const getArtistsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArtistResponse>> => {
    return axios.get(
      `/artists/${id}`,options
    );
  }


export const getGetArtistsIdQueryKey = (id: number,) => [`/artists/${id}`] as const;
  

    
export const getGetArtistsIdQueryOptions = <TData = Awaited<ReturnType<typeof getArtistsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArtistsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getArtistsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetArtistsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArtistsId>>> = ({ signal }) => getArtistsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetArtistsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getArtistsId>>>
export type GetArtistsIdQueryError = AxiosError<Error>

export const useGetArtistsId = <TData = Awaited<ReturnType<typeof getArtistsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArtistsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetArtistsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

export const putArtistsId = (
    id: number,
    artistRequest: ArtistRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArtistResponse>> => {
    return axios.put(
      `/artists/${id}`,
      artistRequest,options
    );
  }



export const getPutArtistsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putArtistsId>>, TError,{id: number;data: ArtistRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putArtistsId>>, TError,{id: number;data: ArtistRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putArtistsId>>, {id: number;data: ArtistRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putArtistsId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutArtistsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putArtistsId>>>
    export type PutArtistsIdMutationBody = ArtistRequest
    export type PutArtistsIdMutationError = AxiosError<Error>

    export const usePutArtistsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putArtistsId>>, TError,{id: number;data: ArtistRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutArtistsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    export const deleteArtistsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/artists/${id}`,options
    );
  }



export const getDeleteArtistsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArtistsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteArtistsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArtistsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteArtistsId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteArtistsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArtistsId>>>
    
    export type DeleteArtistsIdMutationError = AxiosError<Error>

    export const useDeleteArtistsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArtistsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteArtistsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    